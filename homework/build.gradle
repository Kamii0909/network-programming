plugins {
    id 'application'
    id 'eclipse'
}

repositories {
    mavenCentral()
}

application {
    mainModule = 'network.homework'
    mainClass = 'edu.hust.it4060.homework.FakeClass'
    applicationDefaultJvmArgs = ['--enable-preview']
}

eclipse {
    classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.find { it.path == 'src/main/java' }.output = 'bin/main'

                def testSrc = entries.find { it.path == 'src/test/java' }
                testSrc.output = 'bin/test'
                testSrc.entryAttributes['test'] = 'true'
                testSrc.entryAttributes['optional'] = 'true'
                testSrc.entryAttributes['ignore_optional_problems'] = 'true'

                entries.forEach { entry ->
					def entryIn = { it.find { file(entry.path).equals(it) } }
					if (entry.kind == 'lib') {
						entry.entryAttributes['test'] =
							entryIn(configurations.testRuntimeClasspath) &&
							!entryIn(configurations.runtimeClasspath)
					}
	            }
            }
        }
    }
}

dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.0.5')

    implementation project(':app')
    implementation "org.slf4j:slf4j-api"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j2-impl"
    runtimeOnly "org.apache.logging.log4j:log4j-core"
    runtimeOnly "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"

    testImplementation "org.junit.jupiter:junit-jupiter"
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += "--enable-preview"
}

tasks.withType(Test).configureEach {
    jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += "--enable-preview"
}

tasks.named('test') {
    useJUnitPlatform()
}

